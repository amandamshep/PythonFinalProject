
DROP TABLE IF EXISTS Regular;

CREATE TABLE Regular(
ROOM_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
TYPE CHAR(7),
COST NUMERIC,
FEATURE_1 TEXT,
FEATURE_2 TEXT,
FEATURE_3 TEXT
);

DROP TABLE IF EXISTS Penthouse;

CREATE TABLE Penthouse (
ROOM_ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
TYPE CHAR(9),
COST NUMERIC,
FEATURE_1 TEXT,
FEATURE_2 TEXT,
FEATURE_3 TEXT,
FEATURE_4 TEXT,
FEATURE_5 TEXT
);



DROP TABLE IF EXISTS Reservation;

CREATE TABLE Reservation (
    RESERVATION_NUMBER INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    ROOM_ID_REG INTEGER,
    ROOM_ID_PENT INTEGER,
    BEGINNING_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    NAME TEXT,
    EMAIL_ADDRESS TEXT,
    FOREIGN KEY (ROOM_ID_REG) REFERENCES Regular(ROOM_ID),
    FOREIGN KEY (ROOM_ID_PENT) REFERENCES Penthouse(ROOM_ID)
);


CREATE TRIGGER prevent_overlap_regular
BEFORE INSERT ON Reservation
WHEN NEW.ROOM_ID_REG IS NOT NULL
BEGIN
    SELECT 
    CASE
        WHEN EXISTS (
            SELECT 1 FROM Reservation
            WHERE ROOM_ID_REG = NEW.ROOM_ID_REG
              AND (
                    (NEW.BEGINNING_DATE BETWEEN BEGINNING_DATE AND END_DATE)
                 OR (NEW.END_DATE BETWEEN BEGINNING_DATE AND END_DATE)
                 OR (BEGINNING_DATE BETWEEN NEW.BEGINNING_DATE AND NEW.END_DATE)
                 OR (END_DATE BETWEEN NEW.BEGINNING_DATE AND NEW.END_DATE)
              )
        )
        THEN RAISE(ABORT, 'Conflict: Overlapping dates for regular room.')
    END;
END;


CREATE TRIGGER prevent_overlap_penthouse
BEFORE INSERT ON Reservation
WHEN NEW.ROOM_ID_PENT IS NOT NULL
BEGIN
    SELECT 
    CASE
        WHEN EXISTS (
            SELECT 1 FROM Reservation
            WHERE ROOM_ID_PENT = NEW.ROOM_ID_PENT
              AND (
                    (NEW.BEGINNING_DATE BETWEEN BEGINNING_DATE AND END_DATE)
                 OR (NEW.END_DATE BETWEEN BEGINNING_DATE AND END_DATE)
                 OR (BEGINNING_DATE BETWEEN NEW.BEGINNING_DATE AND NEW.END_DATE)
                 OR (END_DATE BETWEEN NEW.BEGINNING_DATE AND NEW.END_DATE)
              )
        )
        THEN RAISE(ABORT, 'Conflict: Overlapping dates for penthouse room.')
    END;
END;


CREATE TRIGGER prevent_overlap_regular_update
BEFORE UPDATE ON Reservation
WHEN NEW.ROOM_ID_REG IS NOT NULL
BEGIN
    SELECT 
    CASE
        WHEN EXISTS (
            SELECT 1 FROM Reservation
            WHERE ROOM_ID_REG = NEW.ROOM_ID_REG
              AND RESERVATION_NUMBER != OLD.RESERVATION_NUMBER
              AND (
                    (NEW.BEGINNING_DATE BETWEEN BEGINNING_DATE AND END_DATE)
                 OR (NEW.END_DATE BETWEEN BEGINNING_DATE AND END_DATE)
                 OR (BEGINNING_DATE BETWEEN NEW.BEGINNING_DATE AND NEW.END_DATE)
                 OR (END_DATE BETWEEN NEW.BEGINNING_DATE AND NEW.END_DATE)
              )
        )
        THEN RAISE(ABORT, 'Conflict: Overlapping dates for regular room.')
    END;
END;


CREATE TRIGGER prevent_overlap_penthouse_update
BEFORE UPDATE ON Reservation
WHEN NEW.ROOM_ID_PENT IS NOT NULL
BEGIN
    SELECT 
    CASE
        WHEN EXISTS (
            SELECT 1 FROM Reservation
            WHERE ROOM_ID_PENT = NEW.ROOM_ID_PENT
              AND RESERVATION_NUMBER != OLD.RESERVATION_NUMBER
              AND (
                    (NEW.BEGINNING_DATE BETWEEN BEGINNING_DATE AND END_DATE)
                 OR (NEW.END_DATE BETWEEN BEGINNING_DATE AND END_DATE)
                 OR (BEGINNING_DATE BETWEEN NEW.BEGINNING_DATE AND NEW.END_DATE)
                 OR (END_DATE BETWEEN NEW.BEGINNING_DATE AND NEW.END_DATE)
              )
        )
        THEN RAISE(ABORT, 'Conflict: Overlapping dates for penthouse room.')
    END;
END;


